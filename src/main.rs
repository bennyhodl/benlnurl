mod error;
mod lnd;
mod pay;

use axum::{routing::get, Router};
use pay::payment_request_callback;
use rusqlite::Connection;

#[tokio::main]
async fn main() {
    let db = match Connection::open("benlnurl.db") {
        Ok(database) => database,
        Err(e) => {
            println!("Error opening the database: {}", e);
            panic!();
        }
    };

    let crete_table_query = "
        create table if not exists benlnurl (
            username text not null unique,
            minSpendable integer not null,
            maxSpendable integer not null,
            address text not null,
            macaroon text not null,
            cert text not null
        )
    ";

    match db.execute(crete_table_query, ()) {
        Ok(..) => println!("Using benlnurl database"),
        Err(e) => println!("Did not create table: {:?}", e),
    }

    println!("Starting benlnurl server");

    let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 3000));

    let router = Router::new().route("/", get(payment_request_callback));

    axum::Server::bind(&addr)
        .serve(router.into_make_service())
        .await
        .unwrap();
}

// let macaroon="0201036c6e6402f801030a109d3fcb49440a9461875429f8b7f798061201301a160a0761646472657373120472656164120577726974651a130a04696e666f120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a210a086d616361726f6f6e120867656e6572617465120472656164120577726974651a160a076d657373616765120472656164120577726974651a170a086f6666636861696e120472656164120577726974651a160a076f6e636861696e120472656164120577726974651a140a057065657273120472656164120577726974651a180a067369676e6572120867656e6572617465120472656164000006201e5d7876b8c567c48d01a0b8ed693b860e07dadf9a22d2d32f42822fafbe1eca";
// let cert="2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434a6a4343416332674177494241674952414a693562494d586a79514544462f675365425874674977436759494b6f5a497a6a3045417749774d5445660a4d4230474131554543684d576247356b494746316447396e5a57356c636d46305a575167593256796444454f4d4177474131554541784d4659577870593255770a4868634e4d6a4d774f5449784d544d784d4455355768634e4d6a51784d5445314d544d784d445535576a41784d523877485159445651514b45785a73626d51670a595856306232646c626d56795958526c5a43426a5a584a304d51347744415944565151444577566862476c6a5a54425a4d424d4742797147534d3439416745470a43437147534d3439417745484130494142483243676d6c37354f526571322f305278775547616b79517936574751637361476731684c46785a742b70725076700a6745514b32457364685463367842704f582b69742f4546733936687256796c4d4f7879563056366a676355776763497744675944565230504151482f424151440a41674b6b4d424d47413155644a51514d4d416f47434373474151554642774d424d41384741315564457745422f7751464d414d4241663877485159445652304f0a42425945464c3174595855484a346642734e424c6c643558496e5a766a61414e4d477347413155644551526b4d474b434257467361574e6c67676c7362324e680a62476876633353434257467361574e6c6767357762327868636931754e43316862476c6a5a594945645735706549494b64573570654842685932746c644949480a596e566d59323975626f63456677414141596351414141414141414141414141414141414141414141596345724251414244414b42676771686b6a4f505151440a41674e484144424541694255746c4b6969537578454c49366c68566d30594774744e4e4b79547262467a706e5066386f3162556f5467496765757a6c7242567a0a3746695162394f7378465955384749514e6f5464775a78616361564f31544b6d46626f3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a";
// let address = "https://localhost:10001";
//
// let mut client = LndClient::new(address, cert, macaroon).await.expect("bad");
// let invoice = client.create_invoice().await;
//
// (
//     StatusCode::OK,
//     Json(PaymentRequest {
//         paymentRequest: invoice,
//     }),
// )
//     .into_response()
